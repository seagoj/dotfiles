#!/bin/zsh
#
# Script to manage dotfiles and linking
# 
# Keeps a list of dotfiles to be linked to $HOME from the $DOTFILES directory. This
# script manages adding and removing from the list as well as rebuilding the
# links.
#
# USAGE:
#
#   $ dot
#   # => rebuilds links based on files in $FNAME
#
#   $ dot add <file>
#   # => adds <file> to $FNAME and rebuilds links
#
#   $ dot rm <file>
#   # => removes <file> from $FNAME and copies $DOTFILES/<file> to $HOME
#
#   @TODO:
#   $ dot <file>
#   # => toggles <file>'s existance in $FNAME and either rebuilds the links or
#   #    copies in the static file

set -e
source $HOME/functions/alerts.zsh

zmodload zsh/mapfile
FNAME=$DOTFILES/bin/dot.list
FLINES=( "${(f)mapfile[$FNAME]}" )

function add() {
    dest=$DOTFILES/$1

    overwrite_all=false
    backup_all=false
    skip_all=false

    if [ -f $dest ] || [ -d $dest]]
        then
        overwrite=false
        backup=false
        skip=false

        if ["$overwrite_all"=="false"] && ["$backup_all"=="false"] && ["$skip_all"=="false"]
        then
            user "File already exists: $dest, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all"
            read -n 1 action

            case "$action" in
                o )
                    overwrite=true;;
                O )
                    overwrite_all=true;;
                b )
                    backup=true;;
                B )
                    backup_all=true;;
                s )
                    skip=true;;
                S )
                    skip_all=true;;
                * )
                    ;;
            esac
        fi

        if [["$overwrite" == "true"]] || [["$overwrite_all"=="true"]]
        then
            rm -rf $dest
            success "removed $dest"
        fi

        if [["$backup"=="true"]] || [["$backup_all"=="true"]]
        then
            mv $dest $dest\.backup
            success "moved $dest to $dest.backup"
        fi

        if [["$skip"=="false"]] || [["$skip_all"=="false"]]
        then
            cp -R ~/$1 $dest
            echo "$1" >> $FNAME
            success "$1 added to $FNAME"
        else
            success "skipped $source"
        fi
    else
        cp -R ~/$1 $dest
        echo "$1" >> $FNAME
        success "$1 added to $FNAME"
    fi
}

function remove() {
    FLINES=( "${(f)mapfile[$FNAME]}" )
    rm $FNAME

    for link in $FLINES
    do
        if [[ "$1" != "$link" ]] ; then
            echo "$link" >> $FNAME
        else
            rm ~/$link
            success "$link removed from $HOME"
            cp -R $DOTFILES/$link ~/$link
            success "Static file copied from $DOTFILES to $HOME"
        fi
    done
}

function link() {
    FLINES=( "${(f)mapfile[$FNAME]}" )

    for link in $FLINES
    do
        rm -R ~/$link
        ln -s $DOTFILES/$link ~/$link
        ls --color=tty -logh ~/$link
    done   
}

if [[ $# -eq 0 ]]; then
    link
elif [[ "$1" == "add" ]] ; then
    add $2
    link
elif [[ "$1" == "remove" ]] ; then
    remove $2
else
    fail "$1 is not a valid action!"
fi
