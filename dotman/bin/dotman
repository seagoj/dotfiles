#!/usr/bin/env bash

. general/.local/functions/log.sh
. "$XDG_CONFIG_HOME"/dotman/config

PACKAGES_FILE="$XDG_CONFIG_HOME"/dotman/packages

# set flags
INIT=

while [[ "${1}" ]]; do
    case "${1}" in
    "--init"|"-i")
        INIT=1
        shift
        ;;
    esac
done

if [[ -z "${LOCAL}" ]]; then
    LOCAL="${DOTFILES:-$HOME/dotfiles}"
fi

dotman::banner() {
    # figlet dotman | lolcat
    if command -v lolcat &>/dev/null; then
        cat banner | lolcat
    else
        cat banner
    fi
}

dotman::clone() {
    git clone --recurse-submodules "${ORIGIN}" "${LOCAL}"
}

dotman::config() {
    if [[ "1" == "$INIT" ]]; then
        echo common > "$PACKAGES_FILE"
        dotman::platform >> "$PACKAGES_FILE"
    fi

    if [[ ! -f "$PACKAGES_FILE" ]]; then
        echo 'Config file not found.'
        echo 'run `dotman --init` to initialize'
        exit 1
    fi
}

dotman::install() {
    packages=("${@}")
    for i in "${packages[@]}"; do
        if [[ -n "${i}" ]]; then
            dotman::stow "${i}"
            if [[ -f "$i"/.packages ]]; then
                sub_packages=( $(<"$i"/.packages) )
                dotman::install "${sub_packages[@]}"
            fi
        fi
    done
}

dotman::platform() {
    if [[ -n "$(uname -r | grep ARCH)" ]]; then
        echo "arch"
    fi
}

dotman::stow() {
    path="${LOCAL}/${1}"

    if [[ ! -d "${path}" ]]; then
        echo "${1} not found."
        exit 1
    fi

    log::info "${1}"
    cd "${LOCAL}"
    stow --ignore=.packages -R -vt "${HOME}" "${1}" &>/dev/null
}

dotman::banner
if [[ ! -d "${LOCAL}"/.git ]]; then
    dotman::clone
fi
dotman::config
packages=( $(<"$XDG_CONFIG_HOME"/dotman/packages) )
dotman::install "${packages[@]}"
